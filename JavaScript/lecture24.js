/*
변수의 shadowing
 변수의 Shadowing
 함수 안에서 밖에서도 선언되었던 같은 이름의 변수를 사용하는 경우

함수 밖의 변수는 잠시 가려짐 (shadowing)
함수 안에서는 해당 함수에서의 변수를 사용 (함수 밖 변수의 값은 변하지 않음)
함수에서 빠져나오면 다시 해당 변수에 접근할 수 있음
함수 안에서만 값이 유지되어야 하는 경우

함수 안에서 var 키워드를 사용해 선언하고 사용
여러 함수에서 값이 유지되면서 사용되는 변수의 경우

함수를 포괄하는 곳에서 선언하고 사용
*/

/*
function shadowing_ex(){
    console.log("F", val); // F 0
    val++;
}

var val = 0;
shadowing_ex();
console.log("0", val); // 0 1
*/


// 변수 scope에 따라 함수 밖에서 선언된 val 값 0을 함수에서 사용할 수 있기에 F 0 이 출력됨
// 그 아래의 val 값은 함수 안의 val++ 수식에 따라 1이 더해졌기 때문에 0 1 으로 출력됨
// 그렇다면 함수 안에서 함수 바깥에 있는 변수와 동일한 이름이지만 다른 값을 가지는 변수를 초기화하면 어떻게 될까?


/*
function shadowing_ex(){
    var val = 5
    console.log("F", val); // F 5
    val++;
    console.log("F", val); // F 6
}

var val = 0;
shadowing_ex();
console.log("0", val); // 0 0
*/

// 함수 바깥에서 val 값이 초기화 되엇지만 함수 안에서 같은 이름의 val 값이 초기화 되었다면 변수 scope에 따라
// 함수가 적용되는 함수 내에서는 바깥의 val 값이 잠시 가려지고 함수 내에서 초기화된 val 값을 가지게 된다
// 함수 안의 val 값이 5로 초기화되었고 수식에 따라 1이 더해져 F 6이 출력되지만
// 이는 함수 안에서만 적용되는 변수이기에 함수가 종료되고 난 후에는 이전에 선언된 val = 0 이 다시 호출되어
// 바깥에서는 그대로 val 는 0의 값을 가지게 된다